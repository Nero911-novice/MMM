# app_pages.py
"""
–í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Marketing Mix Model v2.1.
–í–∫–ª—é—á–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import base64
from io import BytesIO

from mmm_model import MarketingMixModel
from data_processor import DataProcessor
from visualizer import Visualizer
from budget_optimizer import BudgetOptimizer
from grid_search import MMM_GridSearchOptimizer, add_grid_search_method
from export_manager import ExportManager
from config import (
    GRID_SEARCH_MODES, HELP_MESSAGES, BUSINESS_EXPLANATIONS, 
    TARGET_KEYWORDS, MEDIA_KEYWORDS, EXTERNAL_KEYWORDS
)

class AppPages:
    """–ö–ª–∞—Å—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    def __init__(self, processor, visualizer, optimizer):
        self.processor = processor
        self.visualizer = visualizer
        self.optimizer = optimizer
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.export_manager = ExportManager()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ Grid Search –∫ –∫–ª–∞—Å—Å—É –º–æ–¥–µ–ª–∏
        MarketingMixModel.auto_optimize_parameters = add_grid_search_method()
    
    def show_home(self):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        st.header("Marketing Mix Model - –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("""
            ### –ß—Ç–æ —Ç–∞–∫–æ–µ Marketing Mix Modeling?
            
            MMM ‚Äî —ç—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–ª–∏—è–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ 
            –Ω–∞ –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞.
            
            #### –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
            
            **üìä –ê–Ω–∞–ª–∏–∑ –∞—Ç—Ä–∏–±—É—Ü–∏–∏**
            - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∞ –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –ø—Ä–æ–¥–∞–∂–∏
            - –£—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ–Ω–æ—Å–∞ (adstock) –∏ –Ω–∞—Å—ã—â–µ–Ω–∏—è (saturation)
            - –ò–∑–º–µ—Ä–µ–Ω–∏–µ ROAS –ø–æ –∫–∞–Ω–∞–ª–∞–º
            
            **üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞**
            - –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
            - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–µ–¥–∏–∞-–ø–ª–∞–Ω–∞—Ö
            - –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            
            **üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ**
            - "What-if" –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            - –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã
            
            **üìÑ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã** *(–ù–æ–≤–æ–µ –≤ v2.1)*
            - –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel –∏ PDF
            - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            - –ì–æ—Ç–æ–≤—ã–µ –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –æ—Ç—á–µ—Ç—ã
            """)
            
        with col2:
            st.markdown("### –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å")
            st.latex(r'''Sales_t = Base + \sum_{i=1}^{n} Adstock_i(Media_i) \times Saturation_i(Media_i) + Externals_t''')
            
            st.markdown("**–ì–¥–µ:**")
            st.markdown("- Base ‚Äî –±–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è –ø—Ä–æ–¥–∞–∂")
            st.markdown("- Adstock ‚Äî —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞")
            st.markdown("- Saturation ‚Äî —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞—Å—ã—â–µ–Ω–∏—è")
            st.markdown("- Externals ‚Äî –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
            
            if st.button("üé≤ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ", type="primary"):
                demo_data = self.processor.generate_demo_data()
                st.session_state.data = demo_data
                st.success("–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                st.rerun()
            
            # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
            if st.session_state.model_fitted:
                if st.button("üìÑ –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç", help="–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ PDF"):
                    st.switch_page("üìÑ –≠–∫—Å–ø–æ—Ä—Ç")
        
        st.markdown("---")
        
        # –î–µ–º–æ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞", "24 –º–µ—Å—è—Ü–∞")
        
        with col2:
            st.metric("–ú–µ–¥–∏–∞-–∫–∞–Ω–∞–ª—ã", "5 –∫–∞–Ω–∞–ª–æ–≤")
        
        with col3:
            st.metric("–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏", "R¬≤ > 0.8")
        
        with col4:
            st.metric("–≠–∫—Å–ø–æ—Ä—Ç", "Excel + PDF", help="–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è v2.1")

    def show_data(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏."""
        st.header("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
        
        tab1, tab2, tab3 = st.tabs(["–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", "–í–∞–ª–∏–¥–∞—Ü–∏—è"])
        
        with tab1:
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
                uploaded_file = st.file_uploader(
                    "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏",
                    type=['csv'],
                    help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –ø—Ä–æ–¥–∞–∂, –º–µ–¥–∏–∞-—Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"
                )
                
                if uploaded_file is not None:
                    try:
                        data = pd.read_csv(uploaded_file)
                        data['date'] = pd.to_datetime(data['date'])
                        st.session_state.data = data
                        st.success(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(data)} —Å—Ç—Ä–æ–∫")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            
            with col2:
                st.subheader("–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ")
                if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ"):
                    demo_data = self.processor.generate_demo_data()
                    st.session_state.data = demo_data
                    st.success("–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
                    st.rerun()
        
        with tab2:
            if st.session_state.data is not None:
                data = st.session_state.data
                
                st.subheader("–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
                st.dataframe(data.head(10), use_container_width=True)
                
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("–°—Ç—Ä–æ–∫", len(data))
                with col2:
                    st.metric("–°—Ç–æ–ª–±—Ü–æ–≤", len(data.columns))
                with col3:
                    st.metric("–ü–µ—Ä–∏–æ–¥", f"{data['date'].min().strftime('%Y-%m')} - {data['date'].max().strftime('%Y-%m')}")
                with col4:
                    st.metric("–ü—Ä–æ–ø—É—Å–∫–∏", data.isnull().sum().sum())
                
                # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã
                st.subheader("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
                metrics_cols = [col for col in data.columns if any(keyword in col.lower() 
                               for keyword in TARGET_KEYWORDS)]
                
                if metrics_cols:
                    fig = px.line(data, x='date', y=metrics_cols[0], 
                                title=f"–î–∏–Ω–∞–º–∏–∫–∞ {metrics_cols[0]}")
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        
        with tab3:
            if st.session_state.data is not None:
                validation_results = self.processor.validate_data(st.session_state.data)
                
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                
                for check, result in validation_results.items():
                    if result['status']:
                        st.success(f"‚úÖ {check}: {result['message']}")
                    else:
                        st.error(f"‚ùå {check}: {result['message']}")
            else:
                st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")

    def show_model(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏."""
        st.header("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏")

        if st.session_state.data is None:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
            return

        data = st.session_state.data

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ MMM
        with st.expander("üìö –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã Marketing Mix Model", expanded=False):
            st.markdown(BUSINESS_EXPLANATIONS.get('mmm_theory', """
            ### –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Å–Ω–æ–≤–∞ Marketing Mix Modeling
            
            **Marketing Mix Model** –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —ç–∫–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å, –æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –Ω–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤. 
            –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞—Ü–∏—è –±–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∞–¥–¥–∏—Ç–∏–≤–Ω–æ–π –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂.
            """))
    
        tab1, tab2, tab3, tab4 = st.tabs([
            "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏", 
            "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏", 
            "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä",
            "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"
        ])

        with tab1:
            # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏
            with st.expander("üìñ –¢–∏–ø–æ–ª–æ–≥–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ MMM", expanded=False):
                st.markdown("""
                ### –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ Marketing Mix Model
                
                **1. –ó–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (Target Variable)**
                - –û—Å–Ω–æ–≤–Ω–∞—è KPI, –∫–æ—Ç–æ—Ä—É—é –º–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –æ–±—ä—è—Å–Ω–∏—Ç—å –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å
                - –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é
                - –ü—Ä–∏–º–µ—Ä—ã: –∑–∞–∫–∞–∑—ã, –ø—Ä–æ–¥–∞–∂–∏, –≤—ã—Ä—É—á–∫–∞, –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
                
                **2. –ú–µ–¥–∏–∞-–∫–∞–Ω–∞–ª—ã (Media Variables)**
                - –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏
                - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å target, –Ω–∞–ª–∏—á–∏–µ –ª–∞–≥–æ–≤
                - –ü—Ä–∏–º–µ—Ä—ã: –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ paid search, display, social media, TV, radio
                
                **3. –í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã (External Variables)**
                - –ù–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ü–µ–ª–µ–≤—É—é –º–µ—Ç—Ä–∏–∫—É
                - –¢–∏–ø—ã: –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ, —Å–µ–∑–æ–Ω–Ω—ã–µ
                - –§—É–Ω–∫—Ü–∏—è: –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–º–µ—â–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –º–µ–¥–∏–∞-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                
                **4. –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (Control Variables)**
                - –§–∞–∫—Ç–æ—Ä—ã, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –º–µ–¥–∏–∞, –Ω–æ –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                - –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–µ–æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏
                - –ü—Ä–∏–º–µ—Ä—ã: —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø—Ä–æ–º–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                """)
        
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("–ó–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è")
                target_options = [col for col in data.columns if any(keyword in col.lower() 
                                for keyword in TARGET_KEYWORDS)]
                target_var = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –º–µ—Ç—Ä–∏–∫—É:", target_options)
                
                st.subheader("–ú–µ–¥–∏–∞-–∫–∞–Ω–∞–ª—ã")
                media_options = [col for col in data.columns if any(keyword in col.lower() 
                               for keyword in MEDIA_KEYWORDS)]
                selected_media = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏–∞-–∫–∞–Ω–∞–ª—ã:", media_options, default=media_options[:5])
            
            with col2:
                st.subheader("–í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
                external_options = [col for col in data.columns if any(keyword in col.lower() 
                                  for keyword in EXTERNAL_KEYWORDS)]
                selected_external = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã:", external_options, default=external_options)
                
                st.subheader("–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
                control_options = [col for col in data.columns if col not in selected_media + selected_external + [target_var, 'date']]
                selected_controls = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:", control_options)
    
        with tab2:
            # –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            st.subheader("–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
            st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã Adstock (—ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞)")
            adstock_params = {}
            for media in selected_media:
                with st.expander(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {media}"):
                    col1, col2 = st.columns(2)
                    with col1:
                        decay = st.slider(f"Decay rate –¥–ª—è {media}", 0.0, 0.9, 0.5, 0.1, key=f"decay_{media}",
                                        help=HELP_MESSAGES.get('adstock_decay'))
                    with col2:
                        max_lag = st.slider(f"Max lag –¥–ª—è {media}", 1, 12, 6, 1, key=f"lag_{media}",
                                          help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ –ø–µ—Ä–∏–æ–¥–∞—Ö")
                    adstock_params[media] = {'decay': decay, 'max_lag': max_lag}
            
            st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã Saturation (—ç—Ñ—Ñ–µ–∫—Ç –Ω–∞—Å—ã—â–µ–Ω–∏—è)")
            saturation_params = {}
            for media in selected_media:
                with st.expander(f"Saturation –¥–ª—è {media}"):
                    alpha = st.slider(f"Alpha –¥–ª—è {media}", 0.1, 3.0, 1.0, 0.1, key=f"alpha_{media}",
                                    help=HELP_MESSAGES.get('saturation_alpha'))
                    gamma = st.slider(f"Gamma –¥–ª—è {media}", 0.1, 2.0, 0.5, 0.1, key=f"gamma_{media}",
                                    help=HELP_MESSAGES.get('saturation_gamma'))
                    saturation_params[media] = {'alpha': alpha, 'gamma': gamma}

        with tab3:  # –ù–æ–≤—ã–π —Ç–∞–± –¥–ª—è Grid Search
            self._show_grid_search_tab(selected_media, target_var, selected_external, selected_controls, data)
        
        with tab4:  # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            self._show_training_tab(selected_media, target_var, selected_external, selected_controls, 
                                  adstock_params, saturation_params, data)

    def _show_grid_search_tab(self, selected_media, target_var, selected_external, selected_controls, data):
        """–¢–∞–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        st.subheader("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ Grid Search
        with st.expander("‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤?", expanded=False):
            st.markdown("""
            ### Grid Search –¥–ª—è Marketing Mix Model
            
            **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º Grid Search –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
            
            üéØ **–ß—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç—Å—è:**
            - **Adstock decay** - —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞—Ç—É—Ö–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            - **Saturation alpha** - —Ñ–æ—Ä–º–∞ –∫—Ä–∏–≤–æ–π –Ω–∞—Å—ã—â–µ–Ω–∏—è  
            - **Saturation gamma** - —Ç–æ—á–∫–∞ –ø–æ–ª—É–Ω–∞—Å—ã—â–µ–Ω–∏—è
            
            üî¨ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º:**
            1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ—Ç–∫—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            2. –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—é
            3. –í—ã–±–∏—Ä–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º –º–æ–¥–µ–ª–∏
            
            ‚ö° **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
            - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –±–µ–∑ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            - –ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            - –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—é
            """)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Grid Search
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞")
            
            search_mode = st.selectbox(
                "–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞",
                list(GRID_SEARCH_MODES.keys()),
                help=HELP_MESSAGES.get('grid_search_mode')
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            mode_config = GRID_SEARCH_MODES[search_mode]
            decay_steps = mode_config['decay_steps']
            alpha_steps = mode_config['alpha_steps']
            gamma_steps = mode_config['gamma_steps']
            cv_folds = mode_config['cv_folds']
            max_combinations = mode_config['max_combinations']
            estimated_time = mode_config['estimated_time']
            
            scoring_metric = st.selectbox(
                "–ú–µ—Ç—Ä–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
                ["r2", "mape"],
                format_func=lambda x: "R¬≤ (–∫–∞—á–µ—Å—Ç–≤–æ)" if x == "r2" else "MAPE (—Ç–æ—á–Ω–æ—Å—Ç—å)"
            )
            
            st.info(f"üìä –†–µ–∂–∏–º: {search_mode}")
            st.info(f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time}")
            
        with col2:
            st.subheader("üéØ –ö–∞–Ω–∞–ª—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            
            optimize_channels = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã",
                selected_media,
                default=selected_media,
                help="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
            )
            
            if optimize_channels:
                st.markdown("**–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–æ–∏—Å–∫–∞:**")
                for channel in optimize_channels:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
                    if 'google' in channel.lower() or 'search' in channel.lower():
                        decay_range = "0.2-0.6"
                        alpha_range = "0.8-1.5"
                    elif 'facebook' in channel.lower() or 'social' in channel.lower():
                        decay_range = "0.1-0.4"
                        alpha_range = "0.5-1.2"
                    else:
                        decay_range = "0.2-0.7"
                        alpha_range = "0.5-1.5"
                    
                    st.caption(f"üì∫ {channel}: decay {decay_range}, alpha {alpha_range}")
            else:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ Grid Search
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä", type="primary", disabled=not optimize_channels):
            if not optimize_channels:
                st.error("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            try:
                X, y = self.processor.prepare_model_data(
                    data, target_var, selected_media, selected_external, selected_controls
                )
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                status_text.text("üîç –ó–∞–ø—É—Å–∫ Grid Search...")
                progress_bar.progress(10)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
                temp_model = MarketingMixModel()
                
                # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                best_params, best_score, optimizer = temp_model.auto_optimize_parameters(
                    X=X,
                    y=y,
                    media_channels=optimize_channels,
                    decay_steps=decay_steps,
                    alpha_steps=alpha_steps,
                    gamma_steps=gamma_steps,
                    cv_folds=cv_folds,
                    scoring=scoring_metric,
                    max_combinations=max_combinations
                )
                
                progress_bar.progress(100)
                status_text.text("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session_state
                st.session_state.grid_search_results = {
                    'best_params': best_params,
                    'best_score': best_score,
                    'optimizer': optimizer,
                    'search_completed': True
                }
                
                st.success(f"üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –õ—É—á—à–∏–π {scoring_metric}: {best_score:.4f}")
                st.rerun()
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ Grid Search: {str(e)}")
                st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Grid Search
        self._show_grid_search_results(selected_media)

    def _show_grid_search_results(self, selected_media):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Grid Search."""
        if hasattr(st.session_state, 'grid_search_results') and st.session_state.grid_search_results.get('search_completed'):
            results = st.session_state.grid_search_results
            
            st.markdown("---")
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    "–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", 
                    f"{results['best_score']:.4f}",
                    help="–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"
                )
            
            with col2:
                total_tested = len(results['optimizer'].search_results)
                st.metric(
                    "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π", 
                    f"{total_tested}",
                    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
                )
            
            with col3:
                # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                if st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", type="primary"):
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ —Ç–µ–∫—É—â–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    st.session_state.optimized_adstock_params = {
                        ch: {'decay': results['best_params'][ch]['decay']} 
                        for ch in selected_media if ch in results['best_params']
                    }
                    st.session_state.optimized_saturation_params = {
                        ch: {
                            'alpha': results['best_params'][ch]['alpha'],
                            'gamma': results['best_params'][ch]['gamma']
                        } 
                        for ch in selected_media if ch in results['best_params']
                    }
                    st.success("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –æ–±—É—á–µ–Ω–∏—é –º–æ–¥–µ–ª–∏.")
                    st.rerun()
            
            # –¢–∞–±–ª–∏—Ü–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            st.subheader("üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            
            params_data = []
            for channel, params in results['best_params'].items():
                params_data.append({
                    '–ö–∞–Ω–∞–ª': channel.replace('_spend', '').title(),
                    'Adstock Decay': f"{params['decay']:.3f}",
                    'Saturation Alpha': f"{params['alpha']:.3f}",
                    'Saturation Gamma': f"{params['gamma']:.0f}",
                    '–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è': self._interpret_parameters(params['decay'], params['alpha'])
                })
            
            params_df = pd.DataFrame(params_data)
            st.dataframe(params_df, use_container_width=True, hide_index=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞
            st.subheader("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∏—Å–∫–∞")
            progress_fig = results['optimizer'].plot_search_progress()
            if progress_fig:
                st.plotly_chart(progress_fig, use_container_width=True)
            
            # –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            with st.expander("üî¨ –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", expanded=False):
                importance = results['optimizer'].get_parameter_importance(top_n=20)
                
                st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ç–æ–ø-20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö:**")
                for channel, params in importance.items():
                    st.markdown(f"**{channel}:**")
                    for param_name, stats in params.items():
                        st.caption(
                            f"  {param_name}: —Å—Ä–µ–¥–Ω–µ–µ={stats['mean']:.3f}, "
                            f"–¥–∏–∞–ø–∞–∑–æ–Ω={stats['min']:.3f}-{stats['max']:.3f}, "
                            f"—Ä–∞–∑–±—Ä–æ—Å={stats['std']:.3f}"
                        )

    def _show_training_tab(self, selected_media, target_var, selected_external, selected_controls, 
                          adstock_params, saturation_params, data):
        """–¢–∞–± –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏."""
        st.subheader("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
        
        col1, col2 = st.columns(2)
        with col1:
            train_ratio = st.slider("–î–æ–ª—è –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏", 0.6, 0.9, 0.8, 0.05,
                                  help="–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: –æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç —Ç–µ—Å—Ç—É")
            regularization = st.selectbox("–¢–∏–ø —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏", ["Ridge", "Lasso", "ElasticNet"],
                                        help=HELP_MESSAGES.get('regularization'))
        
        with col2:
            alpha_reg = st.slider("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏", 0.001, 1.0, 0.01, 0.001,
                                help="–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å–∏–ª—É —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏: –±–æ–ª—å—à–µ = –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–µ–µ")
            cross_val_folds = st.slider("–ß–∏—Å–ª–æ —Ñ–æ–ª–¥–æ–≤ –¥–ª—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏", 3, 10, 5, 1,
                                      help=HELP_MESSAGES.get('cv_folds'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        use_optimized = False
        if (hasattr(st.session_state, 'optimized_adstock_params') and 
            hasattr(st.session_state, 'optimized_saturation_params')):
            
            use_optimized = st.checkbox(
                "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞",
                value=True,
                help="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Grid Search –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
            )
            
            if use_optimized:
                st.success("ü§ñ –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
                with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è", expanded=False):
                    for channel in st.session_state.optimized_adstock_params:
                        decay = st.session_state.optimized_adstock_params[channel]['decay']
                        alpha = st.session_state.optimized_saturation_params[channel]['alpha']
                        gamma = st.session_state.optimized_saturation_params[channel]['gamma']
                        st.caption(f"{channel}: decay={decay:.3f}, alpha={alpha:.3f}, gamma={gamma:.0f}")
                        
        if st.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", type="primary"):
            with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    if not selected_media:
                        st.error("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ–¥–∏–∞-–∫–∞–Ω–∞–ª")
                        return
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                    if use_optimized:
                        final_adstock_params = st.session_state.optimized_adstock_params
                        final_saturation_params = st.session_state.optimized_saturation_params
                        st.info("ü§ñ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                    else:
                        final_adstock_params = adstock_params
                        final_saturation_params = saturation_params
                        st.info("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                    model = MarketingMixModel(
                        adstock_params=final_adstock_params,
                        saturation_params=final_saturation_params,
                        regularization=regularization,
                        alpha=alpha_reg
                    )
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    X, y = self.processor.prepare_model_data(
                        data, target_var, selected_media, selected_external, selected_controls
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
                    if len(X) < 20:
                        st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (–º–∏–Ω–∏–º—É–º 20 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π)")
                        return
                    
                    # –û–±—É—á–µ–Ω–∏–µ
                    train_size = max(10, int(len(X) * train_ratio))
                    X_train, X_test = X[:train_size], X[train_size:]
                    y_train, y_test = y[:train_size], y[train_size:]
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏
                    if len(X_test) == 0:
                        X_test = X_train.tail(5).copy()
                        y_test = y_train.tail(5).copy()
                    
                    model.fit(X_train, y_train)
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è
                    train_score = model.score(X_train, y_train)
                    test_score = model.score(X_test, y_test)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    st.session_state.model = model
                    st.session_state.model_fitted = True
                    st.session_state.X_train = X_train
                    st.session_state.X_test = X_test
                    st.session_state.y_train = y_train
                    st.session_state.y_test = y_test
                    st.session_state.target_var = target_var
                    st.session_state.selected_media = selected_media
                    st.session_state.selected_external = selected_external
                    st.session_state.selected_controls = selected_controls
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    st.success("–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("R¬≤ (train)", f"{train_score:.3f}")
                    with col2:
                        st.metric("R¬≤ (test)", f"{test_score:.3f}")
                    with col3:
                        overfitting = train_score - test_score
                        st.metric("–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ", f"{overfitting:.3f}", 
                                 delta=None if abs(overfitting) < 0.1 else "–í—ã—Å–æ–∫–æ–µ" if overfitting > 0.1 else "–ù–∏–∑–∫–æ–µ")
                    
                    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–¥–µ–ª–∏
                    if train_score < 0.5:
                        st.warning("‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
                    elif overfitting > 0.2:
                        st.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ. –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏.")
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {str(e)}")
                    st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö.")

    def _interpret_parameters(self, decay, alpha):
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è decay
        if decay < 0.3:
            decay_interp = "–ë—ã—Å—Ç—Ä–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ"
        elif decay < 0.6:
            decay_interp = "–°—Ä–µ–¥–Ω–µ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ"
        else:
            decay_interp = "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ"
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è alpha
        if alpha < 0.8:
            alpha_interp = "–ë—ã—Å—Ç—Ä–æ–µ –Ω–∞—Å—ã—â–µ–Ω–∏–µ"
        elif alpha < 1.2:
            alpha_interp = "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –Ω–∞—Å—ã—â–µ–Ω–∏–µ"
        else:
            alpha_interp = "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –Ω–∞—Å—ã—â–µ–Ω–∏–µ"
        
        return f"{decay_interp}, {alpha_interp}"

    def show_results(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞."""
        st.header("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        if not st.session_state.model_fitted:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        required_session_vars = ['model', 'X_train', 'X_test', 'y_train', 'y_test', 'selected_media']
        missing_vars = [var for var in required_session_vars if var not in st.session_state or st.session_state[var] is None]
        
        if missing_vars:
            st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: {missing_vars}. –ü–µ—Ä–µ–æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
            return
        
        model = st.session_state.model
        
        tab1, tab2, tab3, tab4 = st.tabs(["–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏", "–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è", "ROAS –∞–Ω–∞–ª–∏–∑", "–ö—Ä–∏–≤—ã–µ –Ω–∞—Å—ã—â–µ–Ω–∏—è"])
        
        with tab1:
            self._show_model_quality_tab(model)
        
        with tab2:
            self._show_decomposition_tab(model)
            
        with tab3:
            self._show_roas_tab(model)
            
        with tab4:
            self._show_saturation_tab(model)

    def _show_model_quality_tab(self, model):
        """–¢–∞–± –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏."""
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
        with st.expander("‚ùì –ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏?", expanded=False):
            st.markdown("""
            **–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞** –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –º–æ–¥–µ–ª—å –Ω–∞—É—á–∏–ª–∞—Å—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—à–∏ –ø—Ä–æ–¥–∞–∂–∏:
            
            üìä **–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–∞** (–±—ã–ª–æ R¬≤):
            - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫—É—é –¥–æ–ª—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –æ–±—ä—è—Å–Ω–∏—Ç—å
            - **90%** = –æ—Ç–ª–∏—á–Ω–æ! –ú–æ–¥–µ–ª—å –ø–æ–Ω–∏–º–∞–µ—Ç 90% —Ç–æ–≥–æ, –ø–æ—á–µ–º—É –ø—Ä–æ–¥–∞–∂–∏ —Ä–∞—Å—Ç—É—Ç –∏–ª–∏ –ø–∞–¥–∞—é—Ç
            - **70%** = —Ö–æ—Ä–æ—à–æ, –º–æ–¥–µ–ª—å —É–ª–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏
            - **50%** = —Å–ª–∞–±–æ, –º–æ–¥–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–≤–∏–Ω—É –∫–∞—Ä—Ç–∏–Ω—ã
            
            üéØ **–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏** (–±—ã–ª–æ MAPE):
            - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
            - **90%** = –º–æ–¥–µ–ª—å –æ—á–µ–Ω—å —Ç–æ—á–Ω–∞—è, –æ—à–∏–±–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 10%
            - **80%** = —Ö–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            - **60%** = –ø—Ä–∏–µ–º–ª–µ–º–æ, –Ω–æ –Ω—É–∂–Ω–∞ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å
            """)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É
            quality_assessment = model.get_model_quality_assessment(st.session_state.X_test, st.session_state.y_test)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
            st.markdown(f"### {quality_assessment['status']}")
            st.progress(quality_assessment['quality_score'] / 100)
            st.markdown(f"**–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:** {quality_assessment['quality_score']}/100")
            
            # –ë–∏–∑–Ω–µ—Å-–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            st.success(quality_assessment['business_explanation']['quality'])
            st.info(quality_assessment['business_explanation']['accuracy'])
            st.markdown(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {quality_assessment['recommendation']}")
            
        with col2:
            st.subheader("üìà –ü—Ä–æ–≥–Ω–æ–∑ vs –†–µ–∞–ª—å–Ω–æ—Å—Ç—å")
            y_pred = model.predict(st.session_state.X_test)
            
            fig = self.visualizer.create_time_series_plot(
                pd.DataFrame({
                    'period': range(len(st.session_state.y_test)),
                    '–†–µ–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã': st.session_state.y_test,
                    '–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏': y_pred
                }),
                ['–†–µ–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã', '–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏'],
                'period',
                "–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏"
            )
            st.plotly_chart(fig, use_container_width=True)

    def _show_decomposition_tab(self, model):
        """–¢–∞–± –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂."""
        st.subheader("–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –ø—Ä–æ–¥–∞–∂")
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è
        with st.expander("‚ùì –ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è?", expanded=False):
            st.markdown(BUSINESS_EXPLANATIONS.get('waterfall_chart', """
            **–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –ø—Ä–æ–¥–∞–∂** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã:
            - **Base** = –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç "—Å–∞–º–∏ –ø–æ —Å–µ–±–µ" (–æ—Ä–≥–∞–Ω–∏–∫–∞, –±—Ä–µ–Ω–¥–∏–Ω–≥)
            - **–ú–µ–¥–∏–∞-–∫–∞–Ω–∞–ª—ã** = –∑–∞–∫–∞–∑—ã –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã
            """))
        
        try:
            # –†–∞—Å—á–µ—Ç –≤–∫–ª–∞–¥–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
            contributions = model.get_media_contributions(st.session_state.X_train, st.session_state.y_train)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if contributions and len(contributions) > 0:
                # –ê–Ω–∞–ª–∏–∑ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
                total_contribution = sum(contributions.values())
                base_share = contributions.get('Base', 0) / total_contribution * 100 if total_contribution > 0 else 0
                
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ Base —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
                if base_share > 80:
                    st.warning(f"‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {base_share:.1f}% –ø—Ä–æ–¥–∞–∂. –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å –ø–ª–æ—Ö–æ —É–ª–∞–≤–ª–∏–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã.")
                    st.info("üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ**: —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã adstock/saturation")
                elif base_share < 20:
                    st.warning(f"‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è –≤—Å–µ–≥–æ {base_share:.1f}%. –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã.")
                else:
                    st.success(f"‚úÖ –ó–¥–æ—Ä–æ–≤–∞—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è: –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è {base_share:.1f}%, –ú–µ–¥–∏–∞ {100-base_share:.1f}%")
                
                # Waterfall chart
                fig = self.visualizer.create_waterfall_chart(contributions)
                st.plotly_chart(fig, use_container_width=True)
                
                # –¢–∞–±–ª–∏—Ü–∞ –≤–∫–ª–∞–¥–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                st.subheader("üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–≤")
                contrib_df = pd.DataFrame(list(contributions.items()), columns=['–ö–∞–Ω–∞–ª', '–í–∫–ª–∞–¥'])
                contrib_df['–í–∫–ª–∞–¥, %'] = (contrib_df['–í–∫–ª–∞–¥'] / contrib_df['–í–∫–ª–∞–¥'].sum() * 100).round(1)
                contrib_df['–í–∫–ª–∞–¥'] = contrib_df['–í–∫–ª–∞–¥'].round(0).astype(int)
                
                st.dataframe(contrib_df, use_container_width=True, hide_index=True)
                
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∫–ª–∞–¥—ã –∫–∞–Ω–∞–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏.")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏: {str(e)}")

    def _show_roas_tab(self, model):
        """–¢–∞–± ROAS –∞–Ω–∞–ª–∏–∑–∞."""
        st.subheader("ROAS –ø–æ –∫–∞–Ω–∞–ª–∞–º")

        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ ROAS
        with st.expander("üìö –ß—Ç–æ —Ç–∞–∫–æ–µ ROAS –∏ –∫–∞–∫ –µ–≥–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å", expanded=False):
            st.markdown(BUSINESS_EXPLANATIONS.get('roas_interpretation', """
            **ROAS –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–¥–∞—á—É —Å –∫–∞–∂–¥–æ–≥–æ —Ä—É–±–ª—è —Ä–µ–∫–ª–∞–º—ã:**
            - ROAS = 3.0 –æ–∑–Ω–∞—á–∞–µ—Ç 3 —Ä—É–±–ª—è –¥–æ—Ö–æ–¥–∞ —Å 1 —Ä—É–±–ª—è —Ä–µ–∫–ª–∞–º—ã
            - ROAS < 1.0 = —É–±—ã—Ç–æ—á–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞
            - ROAS > 3.0 = –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞
            """))

        try:
            if hasattr(st.session_state, 'data') and st.session_state.data is not None:
                roas_data = model.calculate_roas(st.session_state.data, st.session_state.selected_media)

                if not roas_data.empty:
                    fig = self.visualizer.create_roas_comparison(roas_data)
                    st.plotly_chart(fig, use_container_width=True)

                    st.subheader("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è ROAS")
                    st.dataframe(roas_data, use_container_width=True)
                else:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å ROAS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
            else:
                st.warning("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ROAS –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ ROAS: {str(e)}")

    def _show_saturation_tab(self, model):
        """–¢–∞–± –∫—Ä–∏–≤—ã—Ö –Ω–∞—Å—ã—â–µ–Ω–∏—è."""
        st.subheader("–ö—Ä–∏–≤—ã–µ –Ω–∞—Å—ã—â–µ–Ω–∏—è")
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫—Ä–∏–≤—ã—Ö –Ω–∞—Å—ã—â–µ–Ω–∏—è
        with st.expander("‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏–≤—ã–µ –Ω–∞—Å—ã—â–µ–Ω–∏—è?", expanded=False):
            st.markdown("""
            **–ö—Ä–∏–≤—ã–µ –Ω–∞—Å—ã—â–µ–Ω–∏—è** –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, –∫–∞–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞.

            üéØ **–ü—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:**
            - –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –ø–æ–ª–∏–≤–∞–µ—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤–æ–¥–æ–π
            - –°–Ω–∞—á–∞–ª–∞ –∫–∞–∂–¥–∞—è –∫–∞–ø–ª—è –≤–æ–¥—ã –æ—á–µ–Ω—å –ø–æ–º–æ–≥–∞–µ—Ç —Ä–æ—Å—Ç—É
            - –ù–æ –µ—Å–ª–∏ –ª–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ - —ç—Ñ—Ñ–µ–∫—Ç —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è
            - –¢–æ –∂–µ —Å–∞–º–æ–µ —Å —Ä–µ–∫–ª–∞–º–æ–π!
            """)
        
        # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        selected_channel = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", st.session_state.selected_media)
        
        if selected_channel and hasattr(st.session_state, 'data'):
            channel_data = st.session_state.data[selected_channel]
            current_spend = channel_data.mean()
            
            fig = self.visualizer.create_saturation_curve(
                channel_data, 
                alpha=1.0, 
                gamma=None, 
                current_spend=current_spend,
                title=f"–ö—Ä–∏–≤–∞—è –Ω–∞—Å—ã—â–µ–Ω–∏—è –¥–ª—è {selected_channel.replace('_spend', '').title()}"
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è")
                median_spend = channel_data[channel_data > 0].median() if len(channel_data[channel_data > 0]) > 0 else current_spend
                
                if current_spend < median_spend * 0.7:
                    st.success("üü¢ **–ù–µ–¥–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω**: –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                elif current_spend < median_spend * 1.2:
                    st.info("üü° **–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å**: –•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                else:
                    st.warning("üü† **–ë–ª–∏–∑–∫–æ –∫ –Ω–∞—Å—ã—â–µ–Ω–∏—é**: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –º–∞–ª–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã")
            
            with col2:
                st.subheader("üéØ –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏")
                st.metric("–¢–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", f"{current_spend:,.0f} —Ä—É–±")
                st.metric("–ú–µ–¥–∏–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", f"{median_spend:,.0f} —Ä—É–±")

    def show_optimization(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–∞."""
        st.header("üí∞ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞")
        
        # –ì–ª–∞–≤–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
        with st.expander("‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞?", expanded=False):
            st.markdown("""
            **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞** - —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–∞–∏–ª—É—á—à–µ–≥–æ —Å–ø–æ—Å–æ–±–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏.
            
            üéØ **–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä:**
            –£ –≤–∞—Å –µ—Å—Ç—å 1 –º–ª–Ω —Ä—É–±–ª–µ–π –Ω–∞ —Ä–µ–∫–ª–∞–º—É. –í–æ–ø—Ä–æ—Å: –∫–∞–∫ –∏—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç—å –º–µ–∂–¥—É Facebook, Google, TikTok?
            
            **–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥:**
            - Facebook: 300,000 —Ä—É–± (30%)
            - Google: 500,000 —Ä—É–± (50%)  
            - TikTok: 200,000 —Ä—É–± (20%)
            - **–†–µ–∑—É–ª—å—Ç–∞—Ç:** 5,000 –∑–∞–∫–∞–∑–æ–≤
            
            **–ü–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**
            - Facebook: 250,000 —Ä—É–± (25%)
            - Google: 600,000 —Ä—É–± (60%)
            - TikTok: 150,000 —Ä—É–± (15%)
            - **–†–µ–∑—É–ª—å—Ç–∞—Ç:** 5,400 –∑–∞–∫–∞–∑–æ–≤ (+400 –∑–∞–∫–∞–∑–æ–≤!)
            
            üí° **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
            1. –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            2. –ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            3. –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º/–º–∞–∫—Å–∏–º—É–º –ø–æ –∫–∞–Ω–∞–ª–∞–º)
            
            üéØ **–¶–µ–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**
            - **–ú–∞–∫—Å–∏–º—É–º –∑–∞–∫–∞–∑–æ–≤** = –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤
            - **–ú–∞–∫—Å–∏–º—É–º ROAS** = –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –æ—Ç–¥–∞—á—É —Å —Ä—É–±–ª—è
            - **–ú–∞–∫—Å–∏–º—É–º ROI** = –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
            """)
        
        if not st.session_state.model_fitted:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–¥–µ–ª—å'")
            return
        
        tab1, tab2 = st.tabs(["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"])
        
        with tab1:
            self._show_optimization_settings_tab()
        
        with tab2:
            self._show_optimization_results_tab()

    def _show_optimization_settings_tab(self):
        """–¢–∞–± –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        with st.expander("‚ùì –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é?", expanded=False):
            st.markdown("""
            **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–æ–¥ –≤–∞—à–∏ –±–∏–∑–Ω–µ—Å-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
            
            üí∞ **–û–±—â–∏–π –±—é–¥–∂–µ—Ç:**
            - –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –¥–µ–Ω–µ–≥ —É –≤–∞—Å –µ—Å—Ç—å –Ω–∞ —Ä–µ–∫–ª–∞–º—É –≤ –º–µ—Å—è—Ü
            - –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç —ç—Ç–∏ –¥–µ–Ω—å–≥–∏ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ
            
            üéØ **–¶–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**
            - **–ú–∞–∫—Å–∏–º—É–º –∑–∞–∫–∞–∑–æ–≤** = –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–æ—Å—Ç–∞)
            - **–ú–∞–∫—Å–∏–º—É–º ROAS** = –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏)
            - **–ú–∞–∫—Å–∏–º—É–º ROI** = –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏
            
            üöß **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º:**
            - **–ú–∏–Ω–∏–º—É–º** = –º–µ–Ω—å—à–µ —ç—Ç–æ–π —Å—É–º–º—ã —Ç—Ä–∞—Ç–∏—Ç—å –Ω–µ–ª—å–∑—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∏–Ω–∏–º—É–º –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É)
            - **–ú–∞–∫—Å–∏–º—É–º** = –±–æ–ª—å—à–µ —ç—Ç–æ–π —Å—É–º–º—ã —Ç—Ä–∞—Ç–∏—Ç—å –Ω–µ–ª—å–∑—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥—ã)
            - –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å 0 –∏–ª–∏ 100% –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª
            
            **–ü—Ä–∏–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:**
            - Facebook: –º–∏–Ω 100–∫ (–∫–æ–º–∞–Ω–¥–∞ —Å–ø—Ä–∞–≤–∏—Ç—Å—è), –º–∞–∫—Å 500–∫ (–±–æ–ª—å—à–µ –Ω–µ –ø–æ—Ç—è–Ω–µ–º)
            - Google: –º–∏–Ω 200–∫ (–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è), –º–∞–∫—Å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            
            üî¨ **–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã:**
            –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥—ã –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (SLSQP, Differential Evolution) 
            –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
            """)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üí∞ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            total_budget = st.number_input(
                "–û–±—â–∏–π –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç (—Ä—É–±)", 
                min_value=10000, 
                value=1000000, 
                step=50000,
                help="–û–±—â–∞—è —Å—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≥–æ—Ç–æ–≤—ã —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Ä–µ–∫–ª–∞–º—É –≤ –º–µ—Å—è—Ü"
            )
            
            optimization_target = st.selectbox(
                "–¶–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", 
                ["maximize_sales", "maximize_roas", "maximize_roi"],
                format_func=lambda x: {
                    "maximize_sales": "üìà –ú–∞–∫—Å–∏–º—É–º –∑–∞–∫–∞–∑–æ–≤ (—Ä–æ—Å—Ç –æ–±—ä–µ–º–æ–≤)",
                    "maximize_roas": "üí∞ –ú–∞–∫—Å–∏–º—É–º ROAS (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)",
                    "maximize_roi": "üíé –ú–∞–∫—Å–∏–º—É–º ROI (–ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å)"
                }[x],
                help="–ß—Ç–æ –≤–∞–∂–Ω–µ–µ: –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤, –≤—ã—à–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–ª–∏ –±–æ–ª—å—à–µ –ø—Ä–∏–±—ã–ª–∏?"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞—Å—Ö–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            current_total = sum(
                st.session_state.data[ch].mean()
                for ch in st.session_state.selected_media
            )
            st.info(f"üí° –¢–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {current_total:,.0f} —Ä—É–±/–º–µ—Å—è—Ü")

        with col2:
            st.subheader("üöß –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º")
            
            use_constraints = st.checkbox(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º", 
                value=False,
                help="–ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª—é–±–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
            )
            
            constraints = {}
            if use_constraints:
                for channel in st.session_state.selected_media:
                    with st.expander(f"‚öôÔ∏è {channel.replace('_spend', '').title()}", expanded=False):
                        current_avg = st.session_state.data[channel].mean()
                        
                        col_min, col_max = st.columns(2)
                        with col_min:
                            min_spend = st.number_input(
                                f"–ú–∏–Ω–∏–º—É–º", 
                                min_value=0, 
                                max_value=total_budget//2, 
                                value=max(0, int(current_avg * 0.5)),
                                step=10000,
                                key=f"min_{channel}",
                                help="–ú–µ–Ω—å—à–µ —ç—Ç–æ–π —Å—É–º–º—ã —Ç—Ä–∞—Ç–∏—Ç—å –Ω–µ–ª—å–∑—è/–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ"
                            )
                        with col_max:
                            max_spend = st.number_input(
                                f"–ú–∞–∫—Å–∏–º—É–º", 
                                min_value=min_spend, 
                                max_value=total_budget, 
                                value=min(total_budget, int(current_avg * 2)),
                                step=10000,
                                key=f"max_{channel}",
                                help="–ë–æ–ª—å—à–µ —ç—Ç–æ–π —Å—É–º–º—ã —Ç—Ä–∞—Ç–∏—Ç—å –Ω–µ–ª—å–∑—è/–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ"
                            )
                        
                        constraints[channel] = {'min': min_spend, 'max': max_spend}
                        st.caption(f"–°–µ–π—á–∞—Å —Ç—Ä–∞—Ç–∏—Ç–µ: {current_avg:,.0f} —Ä—É–±/–º–µ—Å—è—Ü")
            
            st.session_state.optimization_settings = {
                'total_budget': total_budget,
                'target': optimization_target,
                'constraints': constraints if use_constraints else None
            }

    def _show_optimization_results_tab(self):
        """–¢–∞–± —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
        if st.button("üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç", type="primary"):
            if 'optimization_settings' not in st.session_state:
                st.error("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                return
                
            settings = st.session_state.optimization_settings
            
            with st.spinner("–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è..."):
                
                # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                optimal_allocation = self.optimizer.optimize_budget(
                    model=st.session_state.model,
                    total_budget=settings['total_budget'],
                    constraints=settings['constraints'],
                    target=settings['target']
                )
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session_state –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                st.session_state.optimization_results = optimal_allocation
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                st.success("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
                    optimal_df = pd.DataFrame(list(optimal_allocation['allocation'].items()), 
                                            columns=['–ö–∞–Ω–∞–ª', '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç'])
                    optimal_df['–î–æ–ª—è, %'] = (optimal_df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç'] / settings['total_budget'] * 100).round(1)
                    st.dataframe(optimal_df, use_container_width=True)
                    
                    # –ú–µ—Ç—Ä–∏–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
                    st.metric("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –ø—Ä–æ–¥–∞–∂–∏", f"{optimal_allocation['predicted_sales']:,.0f}")
                    st.metric("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π ROAS", f"{optimal_allocation['predicted_roas']:.2f}")
                    st.metric("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π ROI", f"{optimal_allocation['predicted_roi']:.2f}")
                
                with col2:
                    st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞–Ω–∞–ª–∞–º
                    current_allocation = {
                        ch: st.session_state.data[ch].mean()
                        for ch in st.session_state.selected_media
                    }

                    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
                    fig = self.visualizer.create_optimization_results(
                        current_allocation,
                        optimal_allocation['allocation']
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
                st.markdown("---")
                if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"):
                    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —ç–∫—Å–ø–æ—Ä—Ç–∞
                    st.info("–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üìÑ –≠–∫—Å–ø–æ—Ä—Ç' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")

    def show_scenarios(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ü–µ–Ω–∞—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
        st.header("üîÆ –°—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        with st.expander("üìä –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Å—Ü–µ–Ω–∞—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ", expanded=False):
            st.markdown("""
            ### –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Marketing Mix Modeling
            
            **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**
            –°—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ‚Äî —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö 
            —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ –º–µ–¥–∏–∞-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –ø—Ä–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤–Ω–µ—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö.
            
            **–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã:**
            
            1. **–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ**
               - –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ–¥–∏–∞-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
               - –£—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (adstock, saturation)
               - –í–∫–ª—é—á–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            
            2. **–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏–∫–∞**
               - –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
               - Ceteris paribus –ø—Ä–∏–Ω—Ü–∏–ø: –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º
               - –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
            
            **–¢–∏–ø–æ–ª–æ–≥–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:**
            
            **1. –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π**
            - –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (seasonality > 1.0)
            - –ù–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (competition < 1.0)
            - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
            **2. –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π**
            - –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (seasonality < 1.0)
            - –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (competition > 1.0)
            - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ contingency
            
            **3. –ë–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π**
            - –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ —É—Å–ª–æ–≤–∏—è (—Ñ–∞–∫—Ç–æ—Ä—ã = 1.0)
            - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            
            **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤:**
            
            **–°–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä:**
            - 1.5 = +50% –∫ –±–∞–∑–æ–≤–æ–º—É —Å–ø—Ä–æ—Å—É (–≤—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω)
            - 1.0 = –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            - 0.7 = -30% –∫ –±–∞–∑–æ–≤–æ–º—É —Å–ø—Ä–æ—Å—É (–Ω–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω)
            
            **–§–∞–∫—Ç–æ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏:**
            - 1.3 = —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è –Ω–∞ 30%
            - 1.0 = —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è —Å—Ä–µ–¥–∞
            - 0.8 = —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è –Ω–∞ 20%
            """)

        if not st.session_state.model_fitted:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å")
            return

        tab1, tab2 = st.tabs(["–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"])

        with tab1:
            self._show_scenario_creation_tab()

        with tab2:
            self._show_scenario_comparison_tab()

    def _show_scenario_creation_tab(self):
        """–¢–∞–± —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
        st.subheader("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        with st.expander("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", expanded=False):
            st.markdown("""
            ### –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
            
            **–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**
            
            **ROAS (Return on Ad Spend):**
            - **–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç**: ROAS ‚â• 3.0
            - **–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç**: ROAS 2.0-3.0
            - **–ü—Ä–∏–µ–º–ª–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç**: ROAS 1.5-2.0
            - **–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π**: ROAS < 1.5
            
            **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –ø—Ä–æ–¥–∞–∂–∏:**
            - –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Å —Ç–µ–∫—É—â–∏–º —É—Ä–æ–≤–Ω–µ–º –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            - –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            - –û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            
            **–û–±—â–∏–π –±—é–¥–∂–µ—Ç:**
            - –î–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º
            - –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ cash flow
            - –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
            
            **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—é —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:**
            
            1. **–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥**: –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ ¬±20% –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            2. **–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–æ—Å—Ç**: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ 50-100%
            3. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**: –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—â–µ–≥–æ –±—é–¥–∂–µ—Ç–∞
            4. **–ö—Ä–∏–∑–∏—Å–Ω—ã–π**: —Å–Ω–∏–∂–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ 30-50%
            
            **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:**
            
            **"–ß–µ—Ä–Ω–∞—è –ø—è—Ç–Ω–∏—Ü–∞"**: 
            - –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: 1.8 (–≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å)
            - –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è: 1.4 (–≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã)
            - –ë—é–¥–∂–µ—Ç: +150% –∫ –æ–±—ã—á–Ω–æ–º—É
            
            **"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å"**:
            - –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: 0.7 (–Ω–∏–∑–∫–∏–π —Å–ø—Ä–æ—Å)
            - –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è: 0.8 (–≤—Å–µ —ç–∫–æ–Ω–æ–º—è—Ç)
            - –ë—é–¥–∂–µ—Ç: -40% –∫ –æ–±—ã—á–Ω–æ–º—É
            
            **"–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"**:
            - –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: 1.0 (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ)
            - –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è: 1.2 (–æ—Ç–≤–µ—Ç–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è)
            - –ë—é–¥–∂–µ—Ç: +80% –Ω–∞ 3 –º–µ—Å—è—Ü–∞
            """)
        
        scenario_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è", "–°—Ü–µ–Ω–∞—Ä–∏–π 1")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤")
            scenario_budget = {}
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            st.markdown("**–¢–µ–∫—É—â–∏–µ —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:**")
            current_totals = {}
            for channel in st.session_state.selected_media:
                current_value = st.session_state.data[channel].mean()
                current_totals[channel] = current_value
                st.caption(f"{channel}: {current_value:,.0f} —Ä—É–±")
            
            total_current = sum(current_totals.values())
            st.caption(f"**–û–±—â–∏–π —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç: {total_current:,.0f} —Ä—É–±**")
            
            st.markdown("**–ù–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**")
            for channel in st.session_state.selected_media:
                current_value = current_totals[channel]
                scenario_budget[channel] = st.number_input(
                    f"–ë—é–¥–∂–µ—Ç {channel}",
                    min_value=0,
                    value=int(current_value),
                    step=1000,
                    key=f"scenario_{channel}",
                    help=f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_value:,.0f} —Ä—É–±"
                )
        
        with col2:
            st.subheader("–í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
            
            seasonality_factor = st.slider(
                "–°–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä", 0.5, 2.0, 1.0, 0.1,
                help="1.5 = –≤—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω (+50%), 0.7 = –Ω–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω (-30%)"
            )
            competition_factor = st.slider(
                "–§–∞–∫—Ç–æ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏", 0.5, 2.0, 1.0, 0.1,
                help="1.3 = —É—Å–∏–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ (-30% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏), 0.8 = –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ (+20%)"
            )
            
            # –ü—Ä–æ–≥–Ω–æ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏—è
            if st.button("üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
                predicted_results = st.session_state.model.predict_scenario(
                    scenario_budget, seasonality_factor, competition_factor
                )
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                if 'scenarios_results' not in st.session_state:
                    st.session_state.scenarios_results = {}
                st.session_state.scenarios_results[scenario_name] = predicted_results
                
                st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
                
                col_a, col_b, col_c = st.columns(3)
                
                with col_a:
                    st.metric("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –ø—Ä–æ–¥–∞–∂–∏", f"{predicted_results['sales']:,.0f}")
                
                with col_b:
                    roas_result = predicted_results['roas']
                    if roas_result >= 3.0:
                        st.success(f"**ROAS: {roas_result:.2f}** (–û—Ç–ª–∏—á–Ω–æ)")
                    elif roas_result >= 2.0:
                        st.info(f"**ROAS: {roas_result:.2f}** (–•–æ—Ä–æ—à–æ)")
                    else:
                        st.warning(f"**ROAS: {roas_result:.2f}** (–ü—Ä–∏–µ–º–ª–µ–º–æ)")
                
                with col_c:
                    st.metric("–û–±—â–∏–π –±—é–¥–∂–µ—Ç", f"{predicted_results['total_spend']:,.0f}")
                
                # –†–∞–∑–≤–µ—Ä–Ω—É—Ç–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
                st.markdown("### –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                # –ê–Ω–∞–ª–∏–∑ ROAS
                if roas_result >= 3.0:
                    st.success("""
                    **–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**: ROAS –≤—ã—à–µ 3.0 —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—ã—Å–æ–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 
                    –º–µ–¥–∏–∞-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è.
                    """)
                elif roas_result >= 2.0:
                    st.info("""
                    **–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**: ROAS –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 2.0-3.0 –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–µ–º–ª–µ–º—É—é 
                    —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
                    """)
                elif roas_result >= 1.5:
                    st.warning("""
                    **–ü—Ä–∏–µ–º–ª–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**: ROAS 1.5-2.0 –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ 
                    —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
                    """)
                else:
                    st.error("""
                    **–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**: ROAS –Ω–∏–∂–µ 1.5 —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ 
                    –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π. –ù–µ–æ–±—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞.
                    """)
                
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂
                # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å "—Ç–∏–ø–∏—á–Ω—ã–º" —É—Ä–æ–≤–Ω–µ–º
                baseline_sales = st.session_state.data[st.session_state.target_var].mean() if hasattr(st.session_state, 'target_var') else 50000
                sales_change = ((predicted_results['sales'] - baseline_sales) / baseline_sales * 100) if baseline_sales > 0 else 0
                
                if sales_change > 20:
                    st.success(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂: +{sales_change:.1f}%. –°–∏–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–æ—Å—Ç–∞.")
                elif sales_change > 5:
                    st.info(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂: +{sales_change:.1f}%. –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç.")
                elif sales_change > -5:
                    st.warning(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {sales_change:+.1f}%. –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
                else:
                    st.error(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {sales_change:.1f}%. –†–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è.")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
                st.markdown("### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
                
                if seasonality_factor > 1.2:
                    st.info("üìà **–í—ã—Å–æ–∫–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å**: –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∫ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ")
                if competition_factor > 1.2:
                    st.warning("‚öîÔ∏è **–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è**: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–µ–º–∏—É–º-–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
                total_spend = sum(scenario_budget.values())
                if total_spend > total_current * 1.5:
                    st.warning("üí∞ **–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞**: –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
                
                # –†–∏—Å–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                st.markdown("### –†–∏—Å–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
                
                risk_level = "–ù–∏–∑–∫–∏–π"
                if roas_result < 2.0:
                    risk_level = "–í—ã—Å–æ–∫–∏–π"
                elif roas_result < 2.5:
                    risk_level = "–°—Ä–µ–¥–Ω–∏–π"
                
                st.markdown(f"**–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞**: {risk_level}")
                
                if risk_level == "–í—ã—Å–æ–∫–∏–π":
                    st.error("üö® **–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫**: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –º–∞–ª–æ–º –±—é–¥–∂–µ—Ç–µ –ø–µ—Ä–µ–¥ –ø–æ–ª–Ω—ã–º –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º")
                elif risk_level == "–°—Ä–µ–¥–Ω–∏–π":
                    st.warning("‚ö†Ô∏è **–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫**: –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º")
                else:
                    st.success("‚úÖ **–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫**: –°—Ü–µ–Ω–∞—Ä–∏–π –º–æ–∂–Ω–æ –≤–Ω–µ–¥—Ä—è—Ç—å —Å –≤—ã—Å–æ–∫–æ–π —Å—Ç–µ–ø–µ–Ω—å—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")

    def _show_scenario_comparison_tab(self):
        """–¢–∞–± —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
        st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        with st.expander("üìà –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", expanded=False):
            st.markdown("""
            ### –ü—Ä–∏–Ω—Ü–∏–ø—ã —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

            **–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:**

            **1. –¢–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π (Current)**
            - –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            - –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö
            - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ status quo

            **2. Digital Focus**
            - 80% –±—é–¥–∂–µ—Ç–∞ –Ω–∞ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã, 20% –Ω–∞ –æ—Ñ–ª–∞–π–Ω
            - –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∏–∑–º–µ—Ä–∏–º–æ—Å—Ç–∏ –∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞
            - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è D2C –±—Ä–µ–Ω–¥–æ–≤ –∏ e-commerce

            **3. Balanced**
            - –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
            - –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤
            - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤

            **4. Performance**
            - –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–∞—Ö —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∏–º ROAS
            - 70% –±—é–¥–∂–µ—Ç–∞ –Ω–∞ Google + Facebook, 30% –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
            - –°—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

            **–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:**

            1. **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏**: –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º –ø—Ä–æ–¥–∞–∂
            2. **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ROAS**: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
            3. **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫**: –≤—ã–±–æ—Ä –Ω–∞–∏–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            4. **–ë—é–¥–∂–µ—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º
            
            **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**
            
            **–ï—Å–ª–∏ Digital Focus –ª—É—á—à–µ:** 
            - –í–∞—à–∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã
            - –°—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ñ–ª–∞–π–Ω –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
            - –í–æ–∑–º–æ–∂–Ω–æ, —É–ª—É—á—à–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥ –æ—Ñ–ª–∞–π–Ω –∫–∞–Ω–∞–ª–æ–≤
            
            **–ï—Å–ª–∏ Balanced –ª—É—á—à–µ:**
            - –í—Å–µ –∫–∞–Ω–∞–ª—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ
            - –ù–µ—Ç —è–≤–Ω—ã—Ö –ª–∏–¥–µ—Ä–æ–≤/–∞—É—Ç—Å–∞–π–¥–µ—Ä–æ–≤
            - –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–ø—Ä–∞–≤–¥–∞–Ω–∞
            
            **–ï—Å–ª–∏ Performance –ª—É—á—à–µ:**
            - –ï—Å—Ç—å —á–µ—Ç–∫–∏–µ –∫–∞–Ω–∞–ª—ã-–ª–∏–¥–µ—Ä—ã
            - –°—Ç–æ–∏—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç
            - –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã
            """)
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        current_avg = {channel: st.session_state.data[channel].mean() 
                      for channel in st.session_state.selected_media}
        total_current = sum(current_avg.values())
        
        scenarios = {
            "–¢–µ–∫—É—â–∏–π": current_avg,
            "Digital Focus": {
                channel: (total_current * 0.8 / len([ch for ch in st.session_state.selected_media if 'offline' not in ch.lower()]) 
                         if 'offline' not in channel.lower() else total_current * 0.2)
                for channel in st.session_state.selected_media
            },
            "Balanced": {channel: total_current / len(st.session_state.selected_media) 
                       for channel in st.session_state.selected_media},
            "Performance": {
                channel: (total_current * 0.7 / len([ch for ch in st.session_state.selected_media if ch in ['google_spend', 'facebook_spend']])
                         if channel in ['google_spend', 'facebook_spend'] else total_current * 0.3 / (len(st.session_state.selected_media) - 2))
                for channel in st.session_state.selected_media
            }
        }
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        scenario_results = {}
        for name, budget in scenarios.items():
            results = st.session_state.model.predict_scenario(budget, 1.0, 1.0)
            scenario_results[name] = results
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        st.session_state.scenarios_results = scenario_results
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_df = pd.DataFrame(scenario_results).T
        comparison_df = comparison_df.round(2)
        st.dataframe(comparison_df, use_container_width=True)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        fig = make_subplots(
            rows=1, cols=3,
            subplot_titles=['–ü—Ä–æ–¥–∞–∂–∏', 'ROAS', '–ë—é–¥–∂–µ—Ç']
        )
        
        scenarios_list = list(scenario_results.keys())
        
        # –ü—Ä–æ–¥–∞–∂–∏
        fig.add_trace(
            go.Bar(x=scenarios_list, y=[scenario_results[s]['sales'] for s in scenarios_list], 
                  name='–ü—Ä–æ–¥–∞–∂–∏', showlegend=False),
            row=1, col=1
        )
        
        # ROAS
        fig.add_trace(
            go.Bar(x=scenarios_list, y=[scenario_results[s]['roas'] for s in scenarios_list], 
                  name='ROAS', showlegend=False),
            row=1, col=2
        )
        
        # –ë—é–¥–∂–µ—Ç
        fig.add_trace(
            go.Bar(x=scenarios_list, y=[scenario_results[s]['total_spend'] for s in scenarios_list], 
                  name='–ë—é–¥–∂–µ—Ç', showlegend=False),
            row=1, col=3
        )
        
        fig.update_layout(title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", height=400)
        st.plotly_chart(fig, use_container_width=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if 'scenario_results' in locals():
            st.markdown("### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
            best_sales = max(scenario_results.keys(), key=lambda x: scenario_results[x]['sales'])
            best_roas = max(scenario_results.keys(), key=lambda x: scenario_results[x]['roas'])
            most_efficient = min(scenario_results.keys(), key=lambda x: scenario_results[x]['total_spend'])

            col1, col2, col3 = st.columns(3)

            with col1:
                st.success(f"""
            **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏**: {best_sales}

            –ü—Ä–æ–¥–∞–∂–∏: {scenario_results[best_sales]['sales']:,.0f}

            –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –æ–±—ä–µ–º–æ–≤
            """)

            with col2:
                st.info(f"""
            **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ROAS**: {best_roas}

            ROAS: {scenario_results[best_roas]['roas']:.2f}

            –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            """)

            with col3:
                st.warning(f"""
            **–ù–∞–∏–º–µ–Ω—å—à–∏–π –±—é–¥–∂–µ—Ç**: {most_efficient}

            –ë—é–¥–∂–µ—Ç: {scenario_results[most_efficient]['total_spend']:,.0f}

            –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            """)

            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            st.markdown("### –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
            current_results = scenario_results.get('–¢–µ–∫—É—â–∏–π', scenario_results.get('Current'))
            if current_results:
                for name, results in scenario_results.items():
                    if name not in ['–¢–µ–∫—É—â–∏–π', 'Current']:
                        sales_improvement = ((results['sales'] - current_results['sales']) / current_results['sales'] * 100)
                        roas_improvement = ((results['roas'] - current_results['roas']) / current_results['roas'] * 100)
                    
                        if sales_improvement > 10 and roas_improvement > 5:
                            st.success(f"""
                        **{name}**: –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ –≤—Å–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
                        - –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂: +{sales_improvement:.1f}%
                        - –£–ª—É—á—à–µ–Ω–∏–µ ROAS: +{roas_improvement:.1f}%
                        - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
                        """)
                        elif sales_improvement > 5:
                            st.info(f"""
                        **{name}**: –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        - –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂: +{sales_improvement:.1f}%
                        - –ò–∑–º–µ–Ω–µ–Ω–∏–µ ROAS: {roas_improvement:+.1f}%
                        - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ñ–∞–∑—ã —Ä–æ—Å—Ç–∞
                        """)
                        elif roas_improvement > 10:
                            st.info(f"""
                        **{name}**: –ü–æ–≤—ã—à–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
                        - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {sales_improvement:+.1f}%
                        - –£–ª—É—á—à–µ–Ω–∏–µ ROAS: +{roas_improvement:.1f}%
                        - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                        """)
                        else:
                            st.warning(f"""
                        **{name}**: –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                        - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {sales_improvement:+.1f}%
                        - –ò–∑–º–µ–Ω–µ–Ω–∏–µ ROAS: {roas_improvement:+.1f}%
                        - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
                        """)

    def show_export(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        st.header("üìÑ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        if not st.session_state.model_fitted:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        dependencies = self.export_manager.check_dependencies()
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
            
            if dependencies['excel']:
                st.success("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Excel –¥–æ—Å—Ç—É–ø–Ω–∞")
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
                include_charts = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã", value=True)
                include_raw_data = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", value=False)
                
                if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", type="primary"):
                    try:
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                        export_data = self._prepare_export_data(include_raw_data)
                        
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞
                        excel_data, filename = self.export_manager.export_to_excel(
                            export_data, 
                            filename=f"MMM_Report_{pd.Timestamp.now().strftime('%Y%m%d_%H%M')}.xlsx"
                        )
                        
                        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        b64 = base64.b64encode(excel_data).decode()
                        href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{filename}">–°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª</a>'
                        st.markdown(href, unsafe_allow_html=True)
                        
                        st.success(f"‚úÖ Excel —Ñ–∞–π–ª –≥–æ—Ç–æ–≤: {filename}")
                        
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel: {str(e)}")
            else:
                st.error("‚ùå –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openpyxl xlsxwriter")
        
        with col2:
            st.subheader("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF")
            
            if dependencies['pdf']:
                st.success("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PDF –¥–æ—Å—Ç—É–ø–Ω–∞")
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PDF
                include_recommendations = st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", value=True)
                include_methodology = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é", value=False)
                
                if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", type="primary"):
                    try:
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                        export_data = self._prepare_export_data(include_raw_data=False)
                        
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Ñ–∞–π–ª–∞
                        pdf_data, filename = self.export_manager.export_to_pdf(
                            export_data,
                            filename=f"MMM_Report_{pd.Timestamp.now().strftime('%Y%m%d_%H%M')}.pdf"
                        )
                        
                        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        b64 = base64.b64encode(pdf_data).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="{filename}">–°–∫–∞—á–∞—Ç—å PDF —Ñ–∞–π–ª</a>'
                        st.markdown(href, unsafe_allow_html=True)
                        
                        st.success(f"‚úÖ PDF —Ñ–∞–π–ª –≥–æ—Ç–æ–≤: {filename}")
                        
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF: {str(e)}")
            else:
                st.error("‚ùå –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install reportlab")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞
        st.markdown("---")
        st.subheader("üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞")
        
        with st.expander("–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –æ—Ç—á–µ—Ç", expanded=False):
            st.markdown("""
            **Excel –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:**
            - üìä –°–≤–æ–¥–∫–∞ –º–æ–¥–µ–ª–∏ (–∫–∞—á–µ—Å—Ç–≤–æ, –º–µ—Ç—Ä–∏–∫–∏, —Å—Ç–∞—Ç—É—Å)
            - üéØ –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –ø—Ä–æ–¥–∞–∂ –ø–æ –∫–∞–Ω–∞–ª–∞–º
            - üí∞ ROAS –∞–Ω–∞–ª–∏–∑ —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π
            - üìà –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
            - üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞ (–µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å)
            - üîÆ –°—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è)
            - üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            - üìà –î–∏–∞–≥—Ä–∞–º–º—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            - üí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            
            **PDF –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:**
            - üìÑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ
            - üìä –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º –≤–∏–¥–µ
            - üí° –ë–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            - üî¨ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            - üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
            - ‚ö†Ô∏è –†–∏—Å–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            """)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        st.markdown("---")
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìã –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ (Excel)", help="–ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"):
                try:
                    export_data = self._prepare_export_data(include_raw_data=False)
                    summary_data, filename = self.export_manager.export_quick_summary(export_data, format='excel')
                    
                    b64 = base64.b64encode(summary_data).decode()
                    href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{filename}">–°–∫–∞—á–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É</a>'
                    st.markdown(href, unsafe_allow_html=True)
                    st.success("–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –≥–æ—Ç–æ–≤–∞!")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        
        with col2:
            if st.button("üìã –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ (PDF)", help="–ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ PDF"):
                try:
                    export_data = self._prepare_export_data(include_raw_data=False)
                    summary_data, filename = self.export_manager.export_quick_summary(export_data, format='pdf')
                    
                    b64 = base64.b64encode(summary_data).decode()
                    href = f'<a href="data:application/pdf;base64,{b64}" download="{filename}">–°–∫–∞—á–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É PDF</a>'
                    st.markdown(href, unsafe_allow_html=True)
                    st.success("–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ PDF –≥–æ—Ç–æ–≤–∞!")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        
        with col3:
            if st.session_state.optimization_results:
                st.info("üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ —ç–∫—Å–ø–æ—Ä—Ç")
            else:
                st.caption("üí∞ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    
    def _prepare_export_data(self, include_raw_data=False):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."""
        try:
            model = st.session_state.model
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
            if hasattr(st.session_state, 'X_test') and st.session_state.X_test is not None:
                metrics = model.get_model_metrics(st.session_state.X_test, st.session_state.y_test)
            else:
                # –î–µ–º–æ –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                metrics = {
                    '–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–∞': 0.75,
                    '–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (%)': 80.0,
                    '–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞': 500,
                    '–¢–∏–ø–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞': 750
                }
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
            if hasattr(st.session_state, 'X_train') and st.session_state.X_train is not None:
                contributions = model.get_media_contributions(
                    st.session_state.X_train, 
                    st.session_state.y_train
                )
            else:
                contributions = {'Base': 50000, 'facebook_spend': 30000, 'google_spend': 25000}
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ ROAS –¥–∞–Ω–Ω—ã—Ö
            if hasattr(st.session_state, 'data') and st.session_state.data is not None:
                roas_data = model.calculate_roas(st.session_state.data, st.session_state.selected_media)
            else:
                roas_data = pd.DataFrame({
                    'Channel': ['Facebook', 'Google'],
                    'ROAS': [2.5, 3.2],
                    'Total_Spend': [450000, 670000],
                    'Total_Contribution': [1125000, 2144000]
                })
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = self.export_manager.create_export_data(
                model=model,
                data=st.session_state.data if include_raw_data else None,
                contributions=contributions,
                roas_data=roas_data,
                metrics=metrics,
                optimization_results=getattr(st.session_state, 'optimization_results', None),
                scenarios=getattr(st.session_state, 'scenarios_results', None)
            )
            
            return export_data
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
            return None
